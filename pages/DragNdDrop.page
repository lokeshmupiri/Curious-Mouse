<apex:page controller="DragNDropController" id="pg">
<!-- saved from url=(0106)https://scotiadevdomain-%2Dscotiadev-%2Ddropzone.cs50.visual.force.com/apex/AttachFiles?Id=0013B00000HBLO5 -->
<html class=" ext-strict" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    <head>
        <apex:slds />
    <title>Attach Files ~ Salesforce - Enterprise Edition</title>
<apex:stylesheet value="{!URLFOR($Resource.dropzone, 'assets/styles/salesforce-lightning-design-system-vf.css')}" />

    <style>
        .closeBtn {
            width: auto;
            text-align: right;
            cursor: pointer;
        }
    </style>
        
    <script src="../soap/ajax/33.0/connection.js" type="text/javascript"></script>
    <script type="text/javascript">
        var __sfdcSessionId = '{!GETSESSIONID()}'; 
        sforce.connection.sessionId = '{!GETSESSIONID()}';
    </script>
    <script>
        var fileCounter = 0;
        var fileStore = false;    
        console.log('fileStore++++',fileStore);   
        var compCounter;
        var files;
        var recordid ='';
        var recordType = '';
        var recordName = '';
        var currentUserId='0053B000001EwWcQAK';
        
        $.urlParam = function(name){
            var results = new RegExp('[\?&]' + name + '=([^&#]*)').exec(window.location.href);
            if (results==null){
               return null;
            }
            else{
               return decodeURI(results[1]) || 0;
            }
        }
        
        $(window).on('load',function(){  
            console.log('currentUserId+++',currentUserId);
            
            
            recordid = $.urlParam('Id');
            
            //sforce.one.navigateToURL('/apex/AttachFiles_SLDS?recordid='+recordid );

            console.log(recordid);
            // Remote call to get record info
            DragNDropController.getRecordInfo(recordid,function(result, event){
                console.log(result);
                if (event.status) {
                    recordType = result.RecordType.Name;
                    recordName = result.Name;
                    
                    document.getElementById('headerValue').innerHTML = 'Attach Files to '+recordType +'- '+recordName; 
                    document.getElementById('cancelBtn').innerHTML='Back to '+recordType;
                } else if (event.type === 'exception') {
                    console.log(event.message + "\n" + event.where );
                } else {
                   console.log(event.message + "\n" + event.where );
                }
            }); 
            // Remote call to get attachment list
       /*     dropzone.AttachFilesController.getAttachmentList(recordid,function(result, event){
                //console.log(result);
                if (event.status) {
                    refreshRelatedList(result);
                } else if (event.type === 'exception') {
                    console.log(event.message + "\n" + event.where );
                } else {
                   console.log(event.message + "\n" + event.where );
                }
            }); 
            */
            $('.refreshLink').prop('href',(window.location != window.parent.location)? document.referrer : document.location);
            $('#drop').click(function(){
                $('#fileBox').trigger('click');
            });
            $(".box").bind('dragover',function() {  
                $('#drop').css('border','2px dashed #3385E2'); }).bind('dragleave', function() { $('#drop').css('border','2px dashed #ccc'); 
            });
            
             
        });
        
        
        function dragOverEventHandler(e){
            $('#drop').css('border','2px dashed #3385E2');
            $('#drop').css('background','#C4FFCE');
            e.stopPropagation();
            e.preventDefault();
            e.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.      
        }
        function dragEnterEventHandler(e){
            e.stopPropagation();
            e.preventDefault();  
        }
        function dragLeaveEventHandler(e){
             //$('#drop').css('border','2px dashed #ccc');
             $('#drop').css('background','#FFF');
        }
        function dropEventHandler(e){
            e = e || window.event; // get window.event if e argument missing (in IE)   
            if (e.preventDefault) {
                e.preventDefault();
            } // stops the browser from redirecting
            fileCounter = 0; 
            files = [];
            var dt = e.dataTransfer;
            updateDropZoneUI();
            files = dt.files;
            $('.uploadBoxes').empty();
            prepareUpload(files);
            startUploading();  // calling function to upload files
        }
        
        
        function preventDropOnStatusArea(e){
            e = e || window.event; // get window.event if e argument missing (in IE)   
            if (e.preventDefault) {
                e.preventDefault();
            } // stops the browser from redirecting
            alert('Please close drop zone and try again!!');
        }
        
        
        // function to upload files       
        
        function startUploading(){
            //Only proceed if there are files selected
            //dropzoneApp$('.dropZone').hide();
            if(fileStore){
                $('#uploadStatusContainer').show();
                if(files.length == 0){
                    alert('Please select a file!');
                    return; //end function
                }
                
                if(fileCounter < files.length){
                    var file = files[fileCounter];
                    if(file.size > 2000000000){
                        console.error('File size cannot exceed 2 GB \n' + 'Selected file size: ' + formatBytes(file.size));
                        updateUIForFailedUpload(fileCounter,'File size cannot exceed 2 GB');
                        return;
                    }
                    var reader = new FileReader();
                    //reader.readAsBinaryString(file);
                    reader.file = file;
                    //attach event handlers here...
                    reader.onerror = function(e) 
                    {
                        switch(e.target.error.code) 
                        {
                            case e.target.error.NOT_FOUND_ERR:
                                updateUIForFailedUpload(fileCounter,'File Not Found!');
                                break;
                            case e.target.error.NOT_READABLE_ERR:
                                updateUIForFailedUpload(fileCounter,'File is not readable');
                                break;
                            case e.target.error.ABORT_ERR:
                                updateUIForFailedUpload(fileCounter,'Aborted by user');
                                break; // noop
                            default:
                                updateUIForFailedUpload(fileCounter,'An error occurred reading this file.');
                        };
                    };   
                    reader.onloadend = function(e) {
                        if(e.target.readyState == FileReader.DONE){ //Make sure read was successful, DONE == 2
                            var content = new sforce.SObject("ContentVersion");
                            content.Title = this.file.name;
                            content.PathOnClient = '/'+this.file.name;                                                  
                            content.FirstPublishLocationId =recordid;
                            var binary = "";
                            var bytes = new Uint8Array(e.target.result);
                            var length = bytes.byteLength;
                            //Update UI to show that uploading in progress
                            updateUIForUploading(fileCounter);
                            for (var i = 0; i < length; i++) 
                            {
                                binary += String.fromCharCode(bytes[i]);
                            }
                            content.versionData = (new sforce.Base64Binary(binary)).toString();
                            sforce.connection.create([content],
                            {
                                onSuccess : function(result, source)
                                {
                                console.log(result);
                                if (result[0].getBoolean("success"))
                                    {
                                        console.log("new Attachment created with id " + result[0].id);                                             
                                        showUploadStatus(true);                                        
                                    }
                                    else{                                        
                                        console.error("an error has occurred " + error);
                                        showUploadStatus(false);                                        
                                    }
                                },
                                onFailure : function(error, source)
                                {
                                    console.error("an error has occurred " + error);
                                    showUploadStatus(false);
                                }
                            });
                        }
                    };
                    reader.readAsArrayBuffer(file);  // read file as an array strings
                }
            }
            else{
                $('#uploadStatusContainer').show();
                if(files.length == 0){
                    alert('Please select a file!');
                    return; //end function
                }
                if(fileCounter < files.length){
                    var file = files[fileCounter];
                    if(file.size > 25000000){
                        console.error('File size cannot exceed 25 MB\n' + 'Selected file size: ' + formatBytes(file.size));
                        updateUIForFailedUpload(fileCounter,'File size cannot exceed 25 MB');
                        return;
                    }
                    var reader = new FileReader();
                    //reader.readAsBinaryString(file);
                    reader.file = file;
                    //attach event handlers here...
                    reader.onerror = function(e) 
                    {
                        switch(e.target.error.code) 
                        {
                            case e.target.error.NOT_FOUND_ERR:
                                updateUIForFailedUpload(fileCounter,'File Not Found!');
                                break;
                            case e.target.error.NOT_READABLE_ERR:
                                updateUIForFailedUpload(fileCounter,'File is not readable');
                                break;
                            case e.target.error.ABORT_ERR:
                                updateUIForFailedUpload(fileCounter,'Aborted by user');
                                break; // noop
                            default:
                                updateUIForFailedUpload(fileCounter,'An error occurred reading this file.');
                        };
                    };   
                    reader.onloadend = function(e) {
                        if(e.target.readyState == FileReader.DONE){ //Make sure read was successful, DONE == 2
                            var att = new sforce.SObject("Attachment");
                            att.Name = this.file.name;
                            att.ContentType = this.file.type;
                            att.Description = document.getElementById('pg:form:documentType').value;
                            att.ParentId = recordid;
                            
                            var binary = "";
                            var bytes = new Uint8Array(e.target.result);
                            var length = bytes.byteLength;
                            //Update UI to show that uploading in progress
                            updateUIForUploading(fileCounter);
                            for (var i = 0; i < length; i++) 
                            {
                                binary += String.fromCharCode(bytes[i]);
                            }
                            att.Body = (new sforce.Base64Binary(binary)).toString();
                            sforce.connection.create([att],
                            {
                                onSuccess : function(result, source)
                                {
                                    if (result[0].getBoolean("success"))
                                    {
                                         console.log("new Attachment created with id " + result[0].id);
                                         showUploadStatus(true);
                                    }
                                    else
                                    {
                                         console.error("An Error occured - "+result[0]);
                                         showUploadStatus(false);
                                    }
                                },
                                onFailure : function(error, source)
                                {
                                    console.error("an error has occurred " + error);
                                    showUploadStatus(false);
                                }
                            });
                        }
                    };
                    reader.readAsArrayBuffer(file);  // read file as an array strings
                }
            }
        }
        
        
        $(document).ready(function(){
            if (window.FileReader) {
                $(document).ready(function(){
                    var drop;
                    drop = document.getElementById('drop');
                    var status = document.getElementById('status');
                    drop = document.getElementById('drop');
                    var list = document.getElementById('list');
                    try{
                        // Tells the browser that we *can* drop on this target
                        drop.addEventListener('dragenter', dragEnterEventHandler, false);
                        drop.addEventListener('dragover', dragOverEventHandler, false);
                        drop.addEventListener('drop', dropEventHandler, false);
                        drop.addEventListener('dragleave', dragLeaveEventHandler, false);
                        document.getElementById('uploadStatusContainer').addEventListener('drop',preventDropOnStatusArea , false);
                    }
                    catch(err) {
                        alert("This browser doesn't support Drag & Drop of Files. Please try using Google Chrome or Mozilla Firefox to use this application. Redirecting you back to standard way of uploading attachments. (Technical Details : "+err+")");
                    }    
                });
            }
            else{
                console.log('File Reader not supported');
            }
        });
        
      
        function prepareUpload(filelist){
            var file;
            //$('.dropZone').hide();
            $('#uploadStatusContainer').show();
            for (var i = 0; i < filelist.length; i++) {
                file = filelist[i];
                var $uploadStatusComp = $('<div class="uploadStatus uploadStatusCompleted'+i+'" style="width:180px;height: 55px;margin-top:10px;padding-left: 10px;">'
                    +'<div class="upload-status-mark upload-status-mark'+ i +' dropzone-right"/>'
                    +'<div class="dropzone-list-div" >'
                        +'<div>'
                            +'<div class="progress-container dropzone-right">'
                                +'<div class="dropzone-fileName dropzone-left">'
                                    +'<span class="file-name uploadedfileName-'+i+'" style="z-index:5;position: relative;font-size: 10px;color:#000;">'
                                    + (file.name.length>25 ? file.name.substring(0,25)+'...' : file.name)
                                    +'</span>'
                                +'</div>'
                                +'<div id="progress-style-1" class="dropzone-progress dropzone-left dropzone-progress-'+i+'" >'
                                    
                                +'</div>'
                            +'</div>'
                        +'</div>'
                    +'</div>'
                +'</div>'); 
                $uploadStatusComp.appendTo('.uploadBoxes');   
            }
        }
      
        function showUploadStatus(uploadSucceedStatus){
            
            if(uploadSucceedStatus) {
                updateUIForSuccessUpload(fileCounter);    
            }
            else {
                updateUIForFailedUpload(fileCounter,'An error occured while uploading file to server');
            }
            fileCounter++;   //update the counter
            if(fileCounter < files.length){
                startUploading();
            } 
            else{
                console.log('Uploaded all the files successfully');
                uploadCompleteAction(); // refresh related list 
                
                $('.closeBtn').show();
            }               
        } 
        /*
         function showUploadStatus(uploadSucceedStatus, attId, attName, attSize){
            
            if(uploadSucceedStatus) {
                updateUIForSuccessUpload(fileCounter);   
                $('<tr>'  
                    +'<td> <a href="#" onClick="sforce.one.navigateToURL(\'/servlet/servlet.FileDownload?file='+attId+'\')">'+attName+'</a> </td>'
                    +'<td> '+attSize+'</td>'
                    +'<td> <a href="#" id="'+attId+'" onClick="sforce.one.navigateToSObject(this.id);">View File</a> </td>'
                 +'</tr>').prependTo('#relatedListBody');       
            }
            else {
                updateUIForFailedUpload(fileCounter,'An error occured while uploading file to server');
            }
            fileCounter++;   //update the counter
            if(fileCounter < files.length){
                startUploading();
            } 
            else{
                console.log('Uploaded all the files successfully');
                //uploadCompleteAction(); // refresh related list 
                
                $('.closeBtn').show();
            }               
        } */
            
        function updateDropZoneUI(){
            $('#drop').css('border','2px dashed #ccc');
            $('#drop').css('background','#FFF');
        }  
        function formatBytes(bytes,decimals) {
           if(bytes == 0) return '0 Byte';
           var k = 1000;
           var dm = decimals + 1 || 3;
           var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
           var i = Math.floor(Math.log(bytes) / Math.log(k));
           return (bytes / Math.pow(k, i)).toPrecision(dm) + ' ' + sizes[i];
        }
        function showDropzone(){
            $('.dropZone').show();
            $('#uploadStatusContainer').hide();   
            fileCounter = 0; 
            files = [];
            $('.uploadBoxes').empty();
        }
        
        function callUploadFile(){
            if(window.File && window.FileList) {
                files = [];
                files = $('#fileBox').prop("files")
                fileCounter = 0;
                $('.uploadBoxes').empty();
                prepareUpload(files);               
                startUploading(); 
            }
            else {
                alert('Your device doesn\'t meet the requirements.');
            }
        }
        function updateUIForFailedUpload(uploadNum, errorText) {
            console.log(uploadNum);
            $('.dropzone-progress-'+uploadNum).empty();
            $('<span style="width: 100%;" class="dropzone-span-progress"/>').appendTo('.dropzone-progress-'+uploadNum);
            $('.upload-status-mark'+uploadNum).addClass('fail-mark');
            $('<span class="slds-icon_container slds-icon-action-close slds-icon_container--circle"><svg class="slds-icon slds-icon--small" aria-hidden="true"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Resource.dropzone, '/assets/icons/action-sprite/svg/symbols.svg#close')}"></use></svg></span>').appendTo('.upload-status-mark'+uploadNum);
            $('.dropzone-progress-'+uploadNum).addClass('orange'); 
            console.error('Error - '+errorText );
        }
        function updateUIForUploading(uploadNum){
            $('<span id="uploadInProgress-'+uploadNum+'" style="width: 100%;"><img src="/resource/1513082395000/dropzone__loadingbar" style="width: 103%;margin-top:-20px;"/> </span>').appendTo('.dropzone-progress-'+uploadNum);
        }
        function updateUIForSuccessUpload(uploadNum){
            $('.dropzone-progress-'+uploadNum).empty();
            $('<span style="width: 100%;" class="dropzone-span-progress">').appendTo('.dropzone-progress-'+uploadNum);
            $('.upload-status-mark'+uploadNum).addClass('success-mark');
            $('<span class="slds-icon_container slds-icon-standard-task2"><svg class="slds-icon slds-icon--small" aria-hidden="true"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Resource.dropzone, '/assets/icons/standard-sprite/svg/symbols.svg#task2')} "></use></svg></span>').appendTo('.upload-status-mark'+uploadNum);
            $('.dropzone-progress-'+uploadNum).addClass('green');
        }
        $(document).ready(function(){
            $('.pbTitle').css('width','95%');
        });
        
     /*   function refreshRelatedList(attachmentList) {
            for(var i=0; i<attachmentList.length;i++){
                $('<tr>'  
                    +'<td class="slds-size--1-of-4" data-label="Attachments Name"> <a href="#"  id="'+attachmentList[i].ContentDocumentId+'" onClick="sforce.one.navigateToSObject(this.id);">'+attachmentList[i].ContentDocument.Title+'</a> </td>'
                    +'<td class="slds-size--1-of-12" data-label="Size (in Bytes)"> '+attachmentList[i].ContentDocument.ContentSize+'</td>'
                    +'<td class="slds-size--1-of-12" data-label="View File"> <a href="#" onClick="sforce.one.navigateToURL(\'/servlet/servlet.FileDownload?file='+attachmentList[i].ContentDocumentId+'\')">View File</a> </td>'
                 +'</tr>').appendTo('#relatedListBody');        
            }
        }
        */
        function redirectToRecord(attId){
                
        }
        function cancel(){
            window.location.href='/'+recordid;
        }
        function redirectToFile(fileId){
            if('Theme3' == 'Theme4d'){            
                sforce.one.navigateToSObject(fileId);
            }else{
               window.open('/'+fileId);
            }
        }
        
        function redirectToAttachment(fileId){
            if('Theme3' == 'Theme4d'){
                sforce.one.navigateToSObject(fileId);
            }else{
               window.open('/servlet/servlet.FileDownload?file='+fileId);
            }
        }
    </script>
    
    <style>
        .brandPrimaryFgr{
            font-size : 12px;
        }
        .uploadStatus {
            margin: 10px;
            display:inline;
            float : left;
            line-height: 1.42857143;
            font-size:14px;
        }
        .uploadStatus {
          -webkit-box-sizing: border-box;
             -moz-box-sizing: border-box;
                  box-sizing: border-box;
        }
        .uploadStatus:before,
        .uploadStatus:after {
          -webkit-box-sizing: border-box;
             -moz-box-sizing: border-box;
                  box-sizing: border-box;
        }
        
        html body.sfdcBody{
           padding:0px;
        }
              
       .slds .slds-box {
            border : 0px;
            border-bottom: 1px solid #d8dde6;
            border-top: 1px solid #d8dde6;
            border-radius: 0px;
        } 
        .modal-container {
           
            width: 90% !important;
            max-width: 960px !important;
            min-width: 560px !important;
            height: 600px !important;
        }
        .uiModal .modal-body {
          height: 600px !important;
          }
       .pageWrapper {
            height: 400px !important;
        }
    </style>
</head>
<apex:form id="form">
    <apex:actionFunction name="uploadCompleteAction" action="{!refreshAttList}" rerender="relatedListBodypannel"/>

       <div class="slds">           
           <div id="dropArea"><div id="j_id0:j_id1:j_id2:j_id8:box" class="box">
                   <div class="myapp">
                              
                              <div class="slds-grid slds-m-top--large">
                                    
                                    <div class="slds-col slds-col-rule--right ">
                                          <div class="slds-card" style="margin-left:2%;margin-right:2%;">
                                                <header class="slds-card__header slds-grid">
                                                         <div class="slds-col slds-media slds-media--center">
                                                             <div class="slds-media__figure">
                                                                     <span class="slds-icon__container slds-icon slds-icon--small">
                                                                     <svg aria-hidden="true" class="slds-button__icon slds-button__icon--left">      
                                                                      <use xlink:href="{!URLFOR($Resource.dropzone, '/assets/icons/doctype-sprite/svg/symbols.svg#attachment')}"></use>     
                                                                    </svg>
                                                                    </span>
                                                              </div>
                                                              <div class="slds-media__body">
                                                                  <h3 class="slds-text-heading--small" id="headerValue">Attach Files to</h3>
                                                              </div>
                                                          </div>
                                                              <button class="slds-button slds-button--neutral" id="cancelBtn" onclick="cancel();return false;" value="Preview">Back</button>
                                                   </header>
                                                   <section class="slds-card__body">
                                                     <div class="slds-box slds-theme--default">
                                                     Document Type:
                                                     
                                                     <apex:selectList value="{!description}" size="1" id="documentType" >
                                                        <apex:selectOptions value="{!DocumentOptions}"   />
                                                    </apex:selectList> 
                                                    <br/><br/>
                                                        <div class="slds-box slds-theme--shade" id="drop" style="border: 2px dashed rgb(204, 204, 204);"> 
                                                            <div class="slds-text-heading--medium">
                                                                 <center>  
                                                                      <span class="slds-icon__container slds-icon slds-icon--small">
                                                                              <svg aria-hidden="true" class="slds-button__icon slds-button__icon--left">      
                                                                              <use xlink:href="{!URLFOR($Resource.dropzone, '/assets/icons/utility-sprite/svg/symbols.svg#upload')}"></use>     
                                                                            </svg>
                                                                      </span>Drop files here or click to <span class="slds-type-focus" id="browse">browse</span>.
                                                                 </center>
                                                            </div>
                                                        </div>
                                                        <input id="fileBox" multiple="true" onchange="callUploadFile();" style="display: none;" type="file"/>  
                                                    </div>
                                                    <div id="uploadStatusContainer" style="width: 100%;display:none;padding:10px;min-height: 70px;">
                                                        <div class="closeBtn" style="margin-top: 10px;display:none;">
                                                            <span class="slds-icon__container slds-icon-standard-dashboard slds-icon slds-icon--small" id="closeBtnIcon" onclick="showDropzone();" title="Close Upload Box and Refresh Page"> 
                                                                   <svg aria-hidden="true" class="slds-button__icon slds-button__icon--left">      
                                                                              <use xlink:href="{!URLFOR($Resource.dropzone, '/assets/icons/action-sprite/svg/symbols.svg#close')}"></use>     
                                                                            </svg>
                                                            </span>
                                                        </div> 
                                                        <div class="uploadBoxes" style="display: table-cell;">
                                                        </div>  
                                                    </div>
                                                   </section>
                                              </div>
                                     </div>  
                                </div>
                   </div></div>
            </div>
           
            <span id="relatedListOP">
                    <div class="myapp">
                              
                              <div class="slds-grid slds-m-top--large">
                                    
                                    <div class="slds-col slds-col-rule--right ">
                                          <div class="slds-card" style="margin-left:2%;margin-right:2%;">
                                                <header class="slds-card__header slds-grid">
                                                         <div class="slds-col slds-media slds-media--center">
                                                             <div class="slds-media__figure">
                
                                                                     <span class="slds-icon__container slds-icon slds-icon--small">
                                                                        <svg aria-hidden="true" class="slds-button__icon slds-button__icon--left">      
                                                                      <use xlink:href="{!URLFOR($Resource.dropzone, '/assets/icons/doctype-sprite/svg/symbols.svg#attachment')}"></use>     
                                                                    </svg>
                                                                    </span>
                                                              </div>
                                                              <div class="slds-media__body">
                                                                  <h3 class="slds-text-heading--small">Existing Attachments</h3>
                                                              </div>
                                                          </div>
                                                   </header>
                                <apex:outputPanel id="relatedListBodypannel">
                                <section class="slds-card__body">
                                  <div class="slds-scrollable--x">
                                    <table class="slds-table slds-table--bordered">
                                      <thead>
                                        <tr class="slds-no-hover">
                                          <th class="slds-text-heading--label slds-size--1-of-6" scope="col">Name</th>
                                          <th class="slds-text-heading--label slds-size--1-of-12" scope="col">Type</th>
                                          <th class="slds-text-heading--label slds-size--1-of-12" scope="col">View File</th>
                                          
                                        </tr>
                                      </thead>
                                       
                                        <tbody id="relatedListBody">
                                        
                                      <apex:repeat value="{!attList}" var="att">
                                          <tr>
                                            <td> <a href="#" onClick="/servlet/servlet.FileDownload?file={!att.Id}">{!att.Name}</a> </td>
                                            <td> {!att.Description}</td>
                                            <td> <a href="/{!att.Id}" id="'+{!att.Id}+'" >View File</a> </td>
                                         </tr>
                                      </apex:repeat>
                                       
                                      </tbody>
                                    </table>
                                  </div>
                                </section>
                        </apex:outputPanel>
                              </div>
                         </div>  
                      </div>
                    </div></span>     
        </div>
        </apex:form>
</html>
</apex:page>